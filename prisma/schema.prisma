generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model customer {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique(map: "customer_uuid") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String   @db.VarChar(100)
  phone      String   @unique(map: "customer_wa") @db.VarChar(30)
  address    String
  created_at DateTime @db.Timestamp(6)
  order      order[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model invoice {
  id               Int      @id @default(autoincrement())
  uuid             String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_id         Int
  payment_method   String   @default("manual transfer") @db.VarChar
  invoice_date     DateTime @db.Timestamp(6)
  invoice_due_date DateTime @db.Timestamp(6)
  status           String   @default("new") @db.VarChar(50)
  total            Decimal  @db.Decimal
  ppn              Int
  discount         Int
  delivery_charge  Decimal  @db.Decimal
  description      String
  order            order    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model m_files {
  id              Int               @id @default(autoincrement())
  uuid            String            @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  path            String
  name            String
  size            Int
  type            String            @db.VarChar(100)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  m_menu_category m_menu_category[]
  m_menu_files    m_menu_files[]
  m_user          m_user[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model m_menu {
  id                 Int              @id @default(autoincrement())
  uuid               String           @unique(map: "m_menu_uuid") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name               String           @db.VarChar
  description        String
  price              Decimal          @db.Decimal
  price_promo        Decimal          @db.Decimal
  created_at         DateTime         @default(now()) @db.Timestamp(6)
  status             String           @default("draft") @db.VarChar(50)
  m_menu_category_id Int?
  min_qty            Int              @default(1)
  max_qty            Int              @default(1000)
  m_menu_category    m_menu_category? @relation(fields: [m_menu_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  m_menu_files       m_menu_files[]
  m_menu_item        m_menu_item[]
  m_menu_price       m_menu_price[]
  order_detail       order_detail[]
}

model m_menu_files {
  id         Int     @id(map: "m_menu_filed_pkey") @default(autoincrement())
  m_menu_id  Int
  m_files_id Int
  m_files    m_files @relation(fields: [m_files_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  m_menu     m_menu  @relation(fields: [m_menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model m_roles {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  description  String
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  uuid         String         @unique(map: "m_roles_uuid") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  m_user_roles m_user_roles[]
}

model m_user {
  id             Int            @id @default(autoincrement())
  uuid           String         @unique(map: "m_user_uuid") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username       String         @unique(map: "m_user_username") @db.VarChar(50)
  password       String
  created_at     DateTime       @default(now()) @db.Timestamp(6)
  email          String?        @unique
  name           String?
  affiliate_code String?        @unique(map: "m_user_affiliate_code") @db.VarChar(50)
  email_verified Boolean        @default(false)
  image          Int?
  status         String         @default("draft") @db.VarChar(30)
  user_owner     Int?
  m_files        m_files?       @relation(fields: [image], references: [id], onDelete: NoAction, onUpdate: NoAction)
  m_user_roles   m_user_roles[]
}

model m_user_roles {
  id         Int     @id @default(autoincrement())
  m_user_id  Int
  m_roles_id Int
  m_roles    m_roles @relation(fields: [m_roles_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  m_user     m_user  @relation(fields: [m_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([m_user_id, m_roles_id], map: "m_user_roles_m_user_id_m_roles_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model order {
  id             Int            @id @default(autoincrement())
  uuid           String         @unique(map: "order_uuid") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_no       Int?
  notes          String?
  customer_id    Int?
  status         String         @default("draft") @db.VarChar(20)
  created_at     DateTime       @default(now()) @db.Timestamp(6)
  source         String?        @db.VarChar(50)
  affiliate_code String?        @db.VarChar(50)
  user_created   Int?
  invoice        invoice[]
  customer       customer?      @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_detail   order_detail[]
}

model order_detail {
  id        Int     @id @default(autoincrement())
  order_id  Int
  m_menu_id Int
  qty       Int     @default(1)
  discount  Decimal @default(0) @db.Decimal
  price     Decimal @db.Decimal
  notes     String
  m_menu    m_menu  @relation(fields: [m_menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order     order   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model m_menu_category {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique(map: "m_menu_category_uuid") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @db.VarChar
  description String?
  cover       Int?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  status      String   @default("draft") @db.VarChar(50)
  slug        String?  @unique(map: "m_menu_category_slug")
  order       Int?
  is_show     Boolean  @default(false)
  m_menu      m_menu[]
  m_files     m_files? @relation(fields: [cover], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model m_item {
  id          Int           @id @default(autoincrement())
  uuid        String        @unique(map: "m_item_uuid") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String        @db.VarChar
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  status      String        @default("draft") @db.VarChar(50)
  description String?
  m_menu_item m_menu_item[]

  @@unique([name, status], map: "m_item_name_status")
}

model m_menu_item {
  id        Int     @id @default(autoincrement())
  m_menu_id Int
  m_item_id Int?
  order     Int?
  status    String  @default("draft") @db.VarChar
  m_item    m_item? @relation(fields: [m_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  m_menu    m_menu  @relation(fields: [m_menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model m_menu_price {
  id         Int      @id @default(autoincrement())
  min_qty    Int      @default(1)
  max_qty    Int      @default(1000)
  nominal    Decimal  @default(0) @db.Decimal
  m_menu_id  Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  m_menu     m_menu   @relation(fields: [m_menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

import type { NextAuthConfig, Session } from "next-auth";
const { v4: uuidv4 } = require("uuid");
import db from "./prisma/lib/db";
import { authAdapter } from "./adapter";
import { randomUUID } from "crypto";
import jwt from "jsonwebtoken";

const uuid = uuidv4();

export const authConfig = (adapter: any) => {
	return {
		pages: {
			signIn: "/auth/signin",
		},
		callbacks: {
			authorized({ auth, request: { nextUrl } }) {
				const isLoggedIn = !!auth?.user;
				const isOnDashboard = !nextUrl.pathname.startsWith("/auth/signin");

				if (isOnDashboard) {
					if (isLoggedIn) return true;
					return false; // Redirect unauthenticated users to login page
				} else if (isLoggedIn) {
					return Response.redirect(new URL("/", nextUrl));
				}
				return true;
			},
			async signIn(params) {
				console.log("login ya");
				return true;
			},
			async session({ session: defaultSession, user }: any) {
				console.log('SSSS : ', user)
				const session: Session = {
					user: user,
					expires: defaultSession.expires,
				};

				return session;
			},
			async jwt({ token, trigger, user }) {
				
				const authSecret = process.env.AUTH_SECRET;
				if (authSecret) {
					const sessionToken = jwt.sign({id: (user as any).uuid}, authSecret, {
						expiresIn: '60h',
					});
					const session = await authAdapter().createSession?.({
						expires: new Date(Date.now() + 60 * 60 * 24 * 30 * 1000),
						sessionToken,
						userId: (user as any).uuid,
					});

					return { id: session?.sessionToken };
				}

				return null
			},
		},
		jwt: {
			async encode({ token }) {
				// This is the string returned from the `jwt` callback above.
				// It represents the session token that will be set in the browser.
				return token?.id as unknown as string;
			},
			async decode() {
				// Disable default JWT decoding.
				// This method is really only used when using the email provider.
				return null;
			},
		},
		events: {
			async signIn(message) {
				console.log("Signed in!", { message });
			},
			async signOut(message) {
				console.log("Signed out!", { message });
			},
			async createUser(message) {
				console.log("User created!", { message });
			},
			async session(message) {
				console.log("Session !", { message });
			},
		},
		providers: [], // Add providers with an empty array for now
	} satisfies NextAuthConfig;
};
